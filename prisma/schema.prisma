// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Private, Workspace, Public
model Visibility {
  id        Int      @id @default(autoincrement())
  name      String
  boards    Board[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  name       String
  password   String
  workspaces Workspace[]
  Board      Board[]
  Pipe       Pipe[]
  tasks      Task[]
  Activity   Activity[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Workspace {
  id          Int      @id @default(autoincrement())
  name        String
  shortName   String?
  website     String?
  description String?
  boards      Board[]
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Board {
  id               Int        @id @default(autoincrement())
  title            String
  background_image String?
  background_color String?
  pipes            Pipe[]
  visibilityId     Int
  workspaceId      Int
  userId           Int
  visibility       Visibility @relation(fields: [visibilityId], references: [id])
  workspace        Workspace  @relation(fields: [workspaceId], references: [id])
  user             User       @relation(fields: [userId], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Pipe {
  id        Int      @id @default(autoincrement())
  name      String
  tasks     Task[]
  boardId   Int
  userId    Int
  board     Board    @relation(fields: [boardId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  activities  Activity[]
  pipeId      Int
  userId      Int?
  statusId    Int
  pipe        Pipe       @relation(fields: [pipeId], references: [id])
  User        User?      @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Activity {
  id        Int      @id @default(autoincrement())
  content   String
  taskId    Int
  userId    Int
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
